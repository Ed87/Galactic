using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Galactic.Cryptography
{
    /// <summary>
    /// Rijndael is a class that allows for the easy encryption and decryption of strings
    /// using the AES 256 encryption algorithm.
    /// </summary>
    public class AES256
    {
        // ----- CONSTANTS -----

        // ----- VARIABLES -----

        // ----- PROPERTIES -----

        // ----- CONSTRUCTORS -----

        // ----- METHODS -----

        /// <summary>
        /// Generates a random initialization vector for use by the encryption algorithm.
        /// </summary>
        /// <returns>A random array of bytes, or an empty byte array if the IV could not be
        /// generated.</returns>
        static public byte[] GenerateIV()
        {
            // Generate a random initialization vector.
            try
            {
                RijndaelManaged rm = new RijndaelManaged();
                rm.GenerateIV();
                return rm.IV;
            }
            catch (InvalidOperationException)
            {
                // The RijndaelManaged class is not compliant with the FIPS algorithm.
                return new byte[0];
            }
        }

        /// <summary>
        /// Generates a string representation of an array of bytes.
        /// </summary>
        /// <param name="bytes">The bytes to convert.</param>
        /// <returns>A string representation of an array of bytes, or null if
        /// the string is too large to convert successfully.</returns>
        static public string BytesToString(byte[] bytes)
        {
            if (bytes != null && bytes.Length > 0)
            {
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    try
                    {
                        builder.Append(b);
                        builder.Append(',');
                    }
                    catch (ArgumentOutOfRangeException)
                    {
                        // Enlarging the value of the builder instance would exceed MaxCapacity.
                        return null;
                    }
                }
                builder.Remove(builder.Length - 1, 1);
                return builder.ToString();
            }
            return null;
        }

        /// <summary>
        /// Generates a byte representation of a string generated by BytesToString().
        /// </summary>
        /// <param name="text">The string to convert.</param>
        /// <returns>A byte representation of the string, or any empty byte array if the string could not
        /// be successfully converted.</returns>
        static public byte[] StringToBytes(string text)
        {
            if (!string.IsNullOrWhiteSpace(text))
            {
                string[] strings = text.Split(',');
                byte[] bytes = new byte[strings.Length];
                for (int i = 0; i < strings.Length; i++)
                {
                    if (!string.IsNullOrWhiteSpace(strings[i]))
                    {
                        try
                        {
                            bytes[i] = Byte.Parse(strings[i]);
                        }
                        catch (FormatException)
                        {
                            // strings[i] is not of the correct format.
                            return new byte[0];
                        }
                        catch (OverflowException)
                        {
                            // strings[i[ represents a number less than MinValue or greater than MaxValue.
                            return new byte[0];
                        }
                    }
                }
                return bytes;
            }
            return null;
        }

        /// <summary>
        /// Generates a random key for use by the encryption algorithm.
        /// </summary>
        /// <returns>A random array of bytes, or an empty byte array if the key could not be
        /// generated.</returns>
        static public byte[] GenerateKey()
        {
            // Generate a random key.
            try
            {
                RijndaelManaged rm = new RijndaelManaged();
                rm.GenerateKey();
                return rm.Key;
            }
            catch (InvalidOperationException)
            {
                // The RijndaelManaged class is not compliant with the FIPS algorithm.
                return new byte[0];
            }
        }

        /// <summary>
        /// Encrypts a string of text to an array of AES 256 encrypted bytes. 
        /// </summary>
        /// <param name="text">The text to encrypt.</param>
        /// <param name="key">The key used by the encryption algorithm.</param>
        /// <param name="iv">The initialization vector used by the encryption algorithm.</param>
        /// <returns>An encrypted array of bytes, or an empty array of bytes if the string could not
        /// be encrypted.</returns>
        static public byte[] EncryptStringToBytes(string text, byte[] key, byte[] iv)
        {
            // Check the arguments.
            if (string.IsNullOrWhiteSpace(text))
            {
                throw new ArgumentNullException("text");
            }
            if (key == null || key.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }
            if (iv == null || iv.Length <= 0)
            {
                throw new ArgumentNullException("iv");
            }

            // Declare the stream used to encrypt to an in memory array of bytes.
            MemoryStream msEncrypt = null;

            // Declare the RijndaelManaged object used to encrypt the data.
            RijndaelManaged aesAlg = null;

            try
            {
                // Create a RijndaelManaged object with the specified key and IV.
                aesAlg = new RijndaelManaged();
                try
                {
                    aesAlg.Key = key;
                    try
                    {
                        aesAlg.IV = iv;

                        // Create an encryptor to perform the stream transform.
                        ICryptoTransform encryptor = null;
                        try
                        {
                            encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                            // Create the streams used for encryption.
                            msEncrypt = new MemoryStream();

                            CryptoStream csEncrypt = null;
                            try
                            {
                                csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);

                                StreamWriter swEncrypt = null;
                                try
                                {
                                    swEncrypt = new StreamWriter(csEncrypt);

                                    //Write all data to the stream.
                                    try
                                    {
                                        swEncrypt.Write(text);
                                    }
                                    catch (ObjectDisposedException)
                                    {
                                        // AutoFlush is true of the StreamWriter buffer is full, and the current writer is closed.
                                        return new byte[0];
                                    }
                                    catch (NotSupportedException)
                                    {
                                        // AutoFlush is true or the StreamWriter buffer is full, and the contents of the buffer
                                        // can not be written to the underlying fixed size stream because the StreamWriter is
                                        // at the end of the stream.
                                        return new byte[0];
                                    }
                                    catch (IOException)
                                    {
                                        // An I/O error occurred.
                                        return new byte[0];
                                    }
                                }
                                catch (ArgumentException)
                                {
                                    // The StreamWriter is not writable.
                                    return new byte[0];
                                }
                                finally
                                {
                                    // Close the StreamWriter.
                                    if (swEncrypt != null)
                                    {
                                        swEncrypt.Close();
                                    }
                                }
                            }
                            catch (ArgumentException)
                            {
                                // The CryptoStream is not readable, or writeable, or is invalid.
                                return new byte[0];
                            }
                            finally
                            {
                                // Clear the CryptoStream.
                                if (csEncrypt != null)
                                {
                                    csEncrypt.Clear();
                                }
                            }
                        }
                        catch (CryptographicException)
                        {
                            // The value of the ICryptoTransform's Mode parameter is not ECB, CBC, or CFB.
                            return new byte[0];
                        }
                        finally
                        {
                            // Dispose of the ICryptoTransform.
                            if (encryptor != null)
                            {
                                encryptor.Dispose();
                            }
                        }
                    }
                    catch (CryptographicException)
                    {
                        // An attempt was made to set the initialization vector to an invalid size.
                        return new byte[0];
                    }
                }
                catch (CryptographicException)
                {
                    // The key size is invalid.
                    return new byte[0];
                }
            }
            catch (InvalidOperationException)
            {
                // The RijndaelManaged class is not compliant with the FIPS algorithm.
                return new byte[0];
            }
            finally
            {
                // Clear the RijndaelManaged object.
                if (aesAlg != null)
                {
                    aesAlg.Clear();
                }
            }

            // Return the encrypted bytes from the memory stream.
            return msEncrypt.ToArray();
        }

        /// <summary>
        /// Encrypts a string of text with AES 256, and concatenates the key and initialization vector to
        /// the beginning of the string, and the length of the key and initialization vector to the end
        /// of the string. This is useful in scenarios where it is not feasible to store the key and
        /// initialization vector seperately, though not as secure.
        /// </summary>
        /// <param name="text">The text to encrypt.</param>
        /// <returns>A string representation containing the key, initialization vector, and encrypted text,
        /// along with the lengths of the key and initialization vector, or a null string if the text
        /// could not be encrypted or an error occurs creating the string.</returns>
        static public string CreateConsolidatedString(string text)
        {
            // Create the key and initialization vector for the encryption algorithm.
            byte[] key = GenerateKey();
            byte[] iv = GenerateIV();

            // Encrypt the text.
            byte[] encryptedText = EncryptStringToBytes(text, key, iv);

            // Return a string that contains the key, initialization vector, encrypted text, and key and initialization vector lengths.
            string keyByteString = BytesToString(key);
            string ivByteString = BytesToString(iv);
            string encryptedTextByteString = BytesToString(encryptedText);

            // Check that the conversion from bytes to strings was successful.
            if (!string.IsNullOrWhiteSpace(keyByteString) && !string.IsNullOrWhiteSpace(ivByteString) &&
                !string.IsNullOrWhiteSpace(encryptedTextByteString))
            {
                // The conversion was successful. Return the consolidated string.
                return BytesToString(key) + "," + BytesToString(iv) + "," + BytesToString(encryptedText) +
                    "," + key.Length + "," + iv.Length;
            }
            else
            {
                // The conversion was not successful. Return a null string.
                return null;
            }
        }

        /// <summary>
        /// Decrypts a consolidated string containing and AES 256 encrypted string, and properties of the key and initializiation
        /// vector used to encrypt/decrypt the string.
        /// </summary>
        /// <param name="text">The consolidated string to decrypt.</param>
        /// <returns>The text encrypted in the consolidated string, or a null string if the text could not be decrypted or an error
        /// occurs decrypting the string.</returns>
        static public string DecryptConsolidatedString(string text)
        {
            // Check that text was supplied.
            if (!string.IsNullOrWhiteSpace(text))
            {
                // Text was supplied.

                // Get the length of the key and initialization vector from the end of the string.
                int keyLength = 0;
                int ivLength = 0;

                // The index locations of the key and initialization vector lengths in the text.
                int keyLengthIndex = 0;
                int ivLengthIndex = 0;

                // Parse from the end of the string until two number entries are found.
                int entrysFound = 0;
                int lengthIndex = text.Length - 1;
                while (entrysFound < 2 && lengthIndex >= 0)
                {
                    // Check for the comma seperating entries.
                    if (text[lengthIndex] == ',')
                    {
                        // The beginning of an entry was found.
                        // Check whether this is the first or second entry found.
                        if (entrysFound == 0)
                        {
                            // This is the first entry found.
                            // This is the initialization vector length entry.
                            ivLengthIndex = lengthIndex + 1;
                        }
                        else
                        {
                            // This is the second entry found.
                            // This is the key length entry .
                            keyLengthIndex = lengthIndex + 1;
                        }
                        // Increment the number of entries found.
                        entrysFound++;
                    }
                    // Decrement the index of the text character to examine.
                    lengthIndex--;
                }

                // Check whether we found the entries.
                if (entrysFound == 2)
                {
                    // We found the key and initialization vector lengths.

                    // Parse the lengths from the text.
                    if (Int32.TryParse(text.Substring(keyLengthIndex, ivLengthIndex - keyLengthIndex - 1), out keyLength) &&
                        Int32.TryParse(text.Substring(ivLengthIndex, text.Length - ivLengthIndex), out ivLength))
                    {
                        // The key and initialization vector lengths were parsed.

                        // Convert the text to bytes.
                        byte[] textBytes = StringToBytes(text);

                        // Check that the text was properly converted.
                        if (textBytes.Length > 0)
                        {
                            // The text was converted correctly.

                            // Get the key from the text bytes.
                            byte[] key = new byte[keyLength];
                            for (int i = 0; i < keyLength; i++)
                            {
                                key[i] = textBytes[i];
                            }

                            // Get the initialization vector from the text bytes.
                            byte[] iv = new byte[ivLength];
                            int byteIndex = 0;
                            for (int i = keyLength; i < keyLength + ivLength; i++)
                            {
                                iv[byteIndex++] = textBytes[i];
                            }

                            // Get the embedded encrypted string's bytes from the text bytes.
                            // Subtract 2 from the end for the key and initialization vector lengths that are at the end of the text's bytes.
                            int encryptedStringBytesLength = textBytes.Length - ivLength - keyLength - 2;
                            byte[] encryptedStringBytes = new byte[encryptedStringBytesLength];
                            byteIndex = 0;
                            for (int i = keyLength + ivLength; i < keyLength + ivLength + encryptedStringBytesLength; i++)
                            {
                                encryptedStringBytes[byteIndex++] = textBytes[i];
                            }

                            // Decrypt embedded string's bytes and return the unencrypted string.
                            return DecryptStringFromBytes(encryptedStringBytes, key, iv);
                        }
                        else
                        {
                            // The text was not converted correctly.
                            return null;
                        }
                    }
                    else
                    {
                        // The key and initialization vector lengths could not be parsed.
                        return null;
                    }
                }
                else
                {
                    // The entrys were not found.
                    return null;
                }
            }
            else
            {
                // No text supplied.
                // Return with a null string.
                return null;
            }
        }

        /// <summary>
        /// Decrypts an array of AES 256 encrypted bytes to a plain text string. 
        /// </summary>
        /// <param name="cipherText">The bytes to decrypt.</param>
        /// <param name="key">The key used by the decryption algorithm.</param>
        /// <param name="iv">The initialization vector used by the decryption algorithm.</param>
        /// <returns>The decrypted string, or null if the byte array could not be decrypted.</returns>
        static public string DecryptStringFromBytes(byte[] cipherText, byte[] key, byte[] iv)
        {
            // Check arguments.
            if (cipherText == null || cipherText.Length <= 0)
            {
                throw new ArgumentNullException("cipherText");
            }
            if (key == null || key.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }
            if (iv == null || iv.Length <= 0)
            {
                throw new ArgumentNullException("iv");
            }

            // Declare the RijndaelManaged object used to decrypt the data.
            RijndaelManaged aesAlg = null;

            // Declare the string used to hold the decrypted text.
            string text = null;

            try
            {
                // Create a RijndaelManaged object with the specified key and IV.
                aesAlg = new RijndaelManaged();
                try
                {
                    aesAlg.Key = key;
                    try
                    {
                        aesAlg.IV = iv;

                        // Create a decryptor to perform the stream transform.
                        ICryptoTransform decryptor = null;
                        try
                        {
                            decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                            // Create the streams used for decryption.
                            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                            {
                                CryptoStream csDecrypt = null;
                                try
                                {
                                    csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);

                                    StreamReader srDecrypt = null;
                                    try
                                    {
                                        srDecrypt = new StreamReader(csDecrypt);

                                        // Read the decrypted bytes from the decrypting stream
                                        // and place them in a string.
                                        try
                                        {
                                            text = srDecrypt.ReadToEnd();
                                        }
                                        catch (OutOfMemoryException)
                                        {
                                            // There is insufficient memory to allocate a buffer for the returned string.
                                            return null;
                                        }
                                        catch (IOException)
                                        {
                                            // An I/O error occurred.
                                            return null;
                                        }
                                        finally
                                        {
                                            // Close the StreamReader.
                                            if (srDecrypt != null)
                                            {
                                                srDecrypt.Close();
                                            }
                                        }
                                    }
                                    catch (ArgumentException)
                                    {
                                        // The StreamReader does not support reading.
                                        return null;
                                    }
                                    finally
                                    {
                                        // Close the StreamReader.
                                        if (srDecrypt != null)
                                        {
                                            srDecrypt.Close();
                                        }
                                    }
                                }
                                catch (ArgumentException)
                                {
                                    // The CryptoStream is not readable, or writeable, or is invalid.
                                    return null;
                                }
                                finally
                                {
                                    // Clear the CryptoStream.
                                    if (csDecrypt != null)
                                    {
                                        csDecrypt.Clear();
                                    }
                                }
                            }
                        }
                        catch (CryptographicException)
                        {
                            // The value of the ICryptoTransform's Mode parameter is not ECB, CBC, or CFB.
                            return null;
                        }
                        finally
                        {
                            // Dispose of the ICryptoTransform.
                            if (decryptor != null)
                            {
                                decryptor.Dispose();
                            }
                        }
                    }
                    catch (CryptographicException)
                    {
                        // An attempt was made to set the initialization vector to an invalid size.
                        return null;
                    }
                }
                catch (CryptographicException)
                {
                    // The key size is invalid.
                    return null;
                }
            }
            catch (InvalidOperationException)
            {
                // The RijndaelManaged class is not compliant with the FIPS algorithm.
                return null;
            }
            finally
            {
                // Clear the RijndaelManaged object.
                if (aesAlg != null)
                    aesAlg.Clear();
            }

            return text;
        }
    }
}
